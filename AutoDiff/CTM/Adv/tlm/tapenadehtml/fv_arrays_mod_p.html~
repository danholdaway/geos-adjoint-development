<title>Generated by TAPENADE</title>
<link type="text/CSS" rel="stylesheet" href="tapenade.css">
<link type="text/CSS" rel="stylesheet" href="fortranStyle.css">
<body>
<pre><code class="comment">!        Generated by TAPENADE     (INRIA, Ecuador team)</code>
<code class="comment">!  Tapenade 3.12 (r6213) - 13 Oct 2016 10:30</code>
<code class="comment">!</code>
<code class="keyword">MODULE </code><code class="funcname">FV_ARRAYS_MOD</code>
  <code class="keyword">IMPLICIT NONE</code>
  PRIVATE 
<code class="comment">!kind(1.00)</code>
  <code class="typename">INTEGER</code>, <code class="typename">PARAMETER </code>:: <code class="vardecl">real4</code>=<code class="constant">4</code>
<code class="comment">!kind(1.d0)</code>
  <code class="typename">INTEGER</code>, <code class="typename">PARAMETER </code>:: <code class="vardecl">real8</code>=<code class="constant">8</code>
  PUBLIC fvprc, real4, real8, cnvt
<code class="comment">! Full Build Precision for the model</code>
  <code class="typename">INTEGER</code>, <code class="typename">PARAMETER </code>:: <code class="vardecl">fvprc</code>=<code class="vardecl">real8</code>
  <code class="keyword">INTERFACE </code><code class="funcname">CNVT</code>
      <code class="keyword">MODULE PROCEDURE </code><code class="funcname">CNVT0</code>
      <code class="keyword">MODULE PROCEDURE </code><code class="funcname">CNVT1</code>
      <code class="keyword">MODULE PROCEDURE </code><code class="funcname">CNVT2</code>
      <code class="keyword">MODULE PROCEDURE </code><code class="funcname">CNVT3</code>
  <code class="keyword">END INTERFACE</code>


<code class="keyword">CONTAINS</code>
  <code class="typename">REAL(</code><code class="modifier">fvprc</code><code class="typename">) </code><code class="keyword">FUNCTION </code><code class="funcname">CNVT0</code>(<code class="vardecl">dbl_var</code>)
    <code class="keyword">IMPLICIT NONE</code>
    <code class="typename">REAL(</code><code class="modifier">real8</code><code class="typename">)</code>, <code class="typename">INTENT(IN) </code>:: <code class="vardecl">dbl_var</code>
    <code class="typename">REAL </code>:: <code class="vardecl">huge_number</code>
    <code class="typename">REAL </code>:: <code class="vardecl">tiny_number</code>
    <code class="keyword">INTRINSIC </code><code class="funcname">ABS</code>
    <code class="keyword">INTRINSIC </code><code class="funcname">MAX</code>
    <code class="keyword">INTRINSIC </code><code class="funcname">MIN</code>
    <code class="keyword">INTRINSIC </code><code class="funcname">SIGN</code>
    <code class="typename">REAL*8 </code>:: <code class="vardecl">min1</code>
    <code class="typename">REAL*8 </code>:: <code class="vardecl">y2</code>
    <code class="typename">REAL*8 </code>:: <code class="vardecl">y1</code>
    <code class="keyword">IF</code> (dbl_var .GE. <code class="constant">0.</code>) <code class="keyword">THEN</code>
      y2 = dbl_var
    <code class="keyword">ELSE</code>
      y2 = -dbl_var
    <code class="keyword">END IF</code>
    <code class="keyword">IF</code> (tiny_number .LT. y2) <code class="keyword">THEN</code>
      y1 = y2
    <code class="keyword">ELSE</code>
      y1 = tiny_number
    <code class="keyword">END IF</code>
    <code class="keyword">IF</code> (huge_number .GT. y1) <code class="keyword">THEN</code>
      min1 = y1
    <code class="keyword">ELSE</code>
      min1 = huge_number
    <code class="keyword">END IF</code>
    cnvt0 = <code class="funcname">SIGN</code>(min1, dbl_var)
  <code class="keyword">END FUNCTION </code><code class="funcname">CNVT0</code>
  <code class="keyword">FUNCTION </code><code class="funcname">CNVT1</code>(<code class="vardecl">dbl_var</code>)
    <code class="keyword">IMPLICIT NONE</code>
    <code class="typename">REAL(</code><code class="modifier">real8</code><code class="typename">)</code>, <code class="typename">INTENT(IN) </code>:: <code class="vardecl">dbl_var</code>(:)
    <code class="typename">REAL(</code><code class="modifier">fvprc</code><code class="typename">) </code>:: <code class="vardecl">cnvt1</code>(<code class="funcname">LBOUND</code>(<code class="vardecl">dbl_var</code>, <code class="constant">1</code>):<code class="funcname">UBOUND</code>(<code class="vardecl">dbl_var</code>, <code class="constant">1</code>))
    <code class="typename">INTEGER </code>:: <code class="vardecl">i</code>
    <code class="keyword">INTRINSIC </code><code class="funcname">LBOUND</code>
    <code class="keyword">INTRINSIC </code><code class="funcname">UBOUND</code>
    <code class="typename">REAL </code>:: <code class="vardecl">huge_number</code>
    <code class="typename">REAL </code>:: <code class="vardecl">tiny_number</code>
    <code class="keyword">INTRINSIC </code><code class="funcname">ABS</code>
    <code class="keyword">INTRINSIC </code><code class="funcname">MAX</code>
    <code class="keyword">INTRINSIC </code><code class="funcname">MIN</code>
    <code class="keyword">INTRINSIC </code><code class="funcname">SIGN</code>
    <code class="typename">REAL*8 </code>:: <code class="vardecl">min1</code>
    <code class="typename">REAL*8 </code>:: <code class="vardecl">y2</code>
    <code class="typename">REAL*8 </code>:: <code class="vardecl">y1</code>
    <code class="keyword">DO </code>i=<code class="funcname">LBOUND</code>(dbl_var, <code class="constant">1</code>),<code class="funcname">UBOUND</code>(dbl_var, <code class="constant">1</code>)
      <code class="keyword">IF</code> (dbl_var(i) .GE. <code class="constant">0.</code>) <code class="keyword">THEN</code>
        y2 = dbl_var(i)
      <code class="keyword">ELSE</code>
        y2 = -dbl_var(i)
      <code class="keyword">END IF</code>
      <code class="keyword">IF</code> (tiny_number .LT. y2) <code class="keyword">THEN</code>
        y1 = y2
      <code class="keyword">ELSE</code>
        y1 = tiny_number
      <code class="keyword">END IF</code>
      <code class="keyword">IF</code> (huge_number .GT. y1) <code class="keyword">THEN</code>
        min1 = y1
      <code class="keyword">ELSE</code>
        min1 = huge_number
      <code class="keyword">END IF</code>
      cnvt1(i) = <code class="funcname">SIGN</code>(min1, dbl_var(i))
    <code class="keyword">END DO</code>
  <code class="keyword">END FUNCTION </code><code class="funcname">CNVT1</code>
  <code class="keyword">FUNCTION </code><code class="funcname">CNVT2</code>(<code class="vardecl">dbl_var</code>)
    <code class="keyword">IMPLICIT NONE</code>
    <code class="typename">REAL(</code><code class="modifier">real8</code><code class="typename">)</code>, <code class="typename">INTENT(IN) </code>:: <code class="vardecl">dbl_var</code>(:, :)
    <code class="typename">REAL(</code><code class="modifier">fvprc</code><code class="typename">) </code>:: <code class="vardecl">cnvt2</code>(<code class="funcname">LBOUND</code>(<code class="vardecl">dbl_var</code>, <code class="constant">1</code>):<code class="funcname">UBOUND</code>(<code class="vardecl">dbl_var</code>, <code class="constant">1</code>), <code class="funcname">LBOUND</code>(<code class="label">&</code>
<code class="label">&   </code><code class="vardecl">dbl_var</code>, <code class="constant">2</code>):<code class="funcname">UBOUND</code>(<code class="vardecl">dbl_var</code>, <code class="constant">2</code>))
    <code class="typename">INTEGER </code>:: <code class="vardecl">i</code>, <code class="vardecl">j</code>
    <code class="keyword">INTRINSIC </code><code class="funcname">LBOUND</code>
    <code class="keyword">INTRINSIC </code><code class="funcname">UBOUND</code>
    <code class="typename">REAL </code>:: <code class="vardecl">huge_number</code>
    <code class="typename">REAL </code>:: <code class="vardecl">tiny_number</code>
    <code class="keyword">INTRINSIC </code><code class="funcname">ABS</code>
    <code class="keyword">INTRINSIC </code><code class="funcname">MAX</code>
    <code class="keyword">INTRINSIC </code><code class="funcname">MIN</code>
    <code class="keyword">INTRINSIC </code><code class="funcname">SIGN</code>
    <code class="typename">REAL*8 </code>:: <code class="vardecl">min1</code>
    <code class="typename">REAL*8 </code>:: <code class="vardecl">y2</code>
    <code class="typename">REAL*8 </code>:: <code class="vardecl">y1</code>
    <code class="keyword">DO </code>j=<code class="funcname">LBOUND</code>(dbl_var, <code class="constant">2</code>),<code class="funcname">UBOUND</code>(dbl_var, <code class="constant">2</code>)
      <code class="keyword">DO </code>i=<code class="funcname">LBOUND</code>(dbl_var, <code class="constant">1</code>),<code class="funcname">UBOUND</code>(dbl_var, <code class="constant">1</code>)
        <code class="keyword">IF</code> (dbl_var(i, j) .GE. <code class="constant">0.</code>) <code class="keyword">THEN</code>
          y2 = dbl_var(i, j)
        <code class="keyword">ELSE</code>
          y2 = -dbl_var(i, j)
        <code class="keyword">END IF</code>
        <code class="keyword">IF</code> (tiny_number .LT. y2) <code class="keyword">THEN</code>
          y1 = y2
        <code class="keyword">ELSE</code>
          y1 = tiny_number
        <code class="keyword">END IF</code>
        <code class="keyword">IF</code> (huge_number .GT. y1) <code class="keyword">THEN</code>
          min1 = y1
        <code class="keyword">ELSE</code>
          min1 = huge_number
        <code class="keyword">END IF</code>
        cnvt2(i, j) = <code class="funcname">SIGN</code>(min1, dbl_var(i, j))
      <code class="keyword">END DO</code>
    <code class="keyword">END DO</code>
  <code class="keyword">END FUNCTION </code><code class="funcname">CNVT2</code>
  <code class="keyword">FUNCTION </code><code class="funcname">CNVT3</code>(<code class="vardecl">dbl_var</code>)
    <code class="keyword">IMPLICIT NONE</code>
    <code class="typename">REAL(</code><code class="modifier">real8</code><code class="typename">)</code>, <code class="typename">INTENT(IN) </code>:: <code class="vardecl">dbl_var</code>(:, :, :)
    <code class="typename">REAL(</code><code class="modifier">fvprc</code><code class="typename">) </code>:: <code class="vardecl">cnvt3</code>(<code class="funcname">LBOUND</code>(<code class="vardecl">dbl_var</code>, <code class="constant">1</code>):<code class="funcname">UBOUND</code>(<code class="vardecl">dbl_var</code>, <code class="constant">1</code>), <code class="funcname">LBOUND</code>(<code class="label">&</code>
<code class="label">&   </code><code class="vardecl">dbl_var</code>, <code class="constant">2</code>):<code class="funcname">UBOUND</code>(<code class="vardecl">dbl_var</code>, <code class="constant">2</code>), <code class="funcname">LBOUND</code>(<code class="vardecl">dbl_var</code>, <code class="constant">3</code>):<code class="funcname">UBOUND</code>(<code class="vardecl">dbl_var</code>, <code class="constant">3</code><code class="label">&</code>
<code class="label">&   </code>))
    <code class="typename">INTEGER </code>:: <code class="vardecl">i</code>, <code class="vardecl">j</code>, <code class="vardecl">k</code>
    <code class="keyword">INTRINSIC </code><code class="funcname">LBOUND</code>
    <code class="keyword">INTRINSIC </code><code class="funcname">UBOUND</code>
    <code class="typename">REAL </code>:: <code class="vardecl">huge_number</code>
    <code class="typename">REAL </code>:: <code class="vardecl">tiny_number</code>
    <code class="keyword">INTRINSIC </code><code class="funcname">ABS</code>
    <code class="keyword">INTRINSIC </code><code class="funcname">MAX</code>
    <code class="keyword">INTRINSIC </code><code class="funcname">MIN</code>
    <code class="keyword">INTRINSIC </code><code class="funcname">SIGN</code>
    <code class="typename">REAL*8 </code>:: <code class="vardecl">min1</code>
    <code class="typename">REAL*8 </code>:: <code class="vardecl">y2</code>
    <code class="typename">REAL*8 </code>:: <code class="vardecl">y1</code>
    <code class="keyword">DO </code>k=<code class="funcname">LBOUND</code>(dbl_var, <code class="constant">3</code>),<code class="funcname">UBOUND</code>(dbl_var, <code class="constant">3</code>)
      <code class="keyword">DO </code>j=<code class="funcname">LBOUND</code>(dbl_var, <code class="constant">2</code>),<code class="funcname">UBOUND</code>(dbl_var, <code class="constant">2</code>)
        <code class="keyword">DO </code>i=<code class="funcname">LBOUND</code>(dbl_var, <code class="constant">1</code>),<code class="funcname">UBOUND</code>(dbl_var, <code class="constant">1</code>)
          <code class="keyword">IF</code> (dbl_var(i, j, k) .GE. <code class="constant">0.</code>) <code class="keyword">THEN</code>
            y2 = dbl_var(i, j, k)
          <code class="keyword">ELSE</code>
            y2 = -dbl_var(i, j, k)
          <code class="keyword">END IF</code>
          <code class="keyword">IF</code> (tiny_number .LT. y2) <code class="keyword">THEN</code>
            y1 = y2
          <code class="keyword">ELSE</code>
            y1 = tiny_number
          <code class="keyword">END IF</code>
          <code class="keyword">IF</code> (huge_number .GT. y1) <code class="keyword">THEN</code>
            min1 = y1
          <code class="keyword">ELSE</code>
            min1 = huge_number
          <code class="keyword">END IF</code>
          cnvt3(i, j, k) = <code class="funcname">SIGN</code>(min1, dbl_var(i, j, k))
        <code class="keyword">END DO</code>
      <code class="keyword">END DO</code>
    <code class="keyword">END DO</code>
  <code class="keyword">END FUNCTION </code><code class="funcname">CNVT3</code>
<code class="keyword">END MODULE </code><code class="funcname">FV_ARRAYS_MOD</code>
</pre>
</body>
