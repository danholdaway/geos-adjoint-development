!        Generated by TAPENADE     (INRIA, Tropics team)
!  Tapenade 3.9 (r5096) - 24 Feb 2014 16:53
!
!  Differentiation of fxppmlinear in forward (tangent) mode:
!   variations   of useful results: flux
!   with respect to varying inputs: q c
!   RW status of diff variables: q:in flux:out c:in
SUBROUTINE FXPPMLINEAR_D(c, cd, q, qd, flux, fluxd, iord, ifirst, ilast&
& , jfirst, jlast, npx, npy, ppm_limiter)
  IMPLICIT NONE
! !INPUT PARAMETERS:
!  X-Dir strip
  INTEGER, INTENT(IN) :: ifirst, ilast
!  Y-Dir strip
  INTEGER, INTENT(IN) :: jfirst, jlast
  INTEGER, INTENT(IN) :: iord
  INTEGER, INTENT(IN) :: npx, npy
  INTEGER :: ng
  REAL, INTENT(IN) :: q(ifirst-ng:ilast+ng, jfirst:jlast)
  REAL, INTENT(IN) :: qd(ifirst-ng:ilast+ng, jfirst:jlast)
! Courant   N (like FLUX)
  REAL, INTENT(IN) :: c(ifirst:ilast+1, jfirst:jlast)
  REAL, INTENT(IN) :: cd(ifirst:ilast+1, jfirst:jlast)
  REAL, INTENT(IN) :: ppm_limiter
! !OUTPUT PARAMETERS:
!  Flux
  REAL, INTENT(OUT) :: flux(ifirst:ilast+1, jfirst:jlast)
  REAL, INTENT(OUT) :: fluxd(ifirst:ilast+1, jfirst:jlast)
! Local
  REAL :: dm1(ifirst-2:ilast+2)
  REAL :: dm1d(ifirst-2:ilast+2)
  REAL :: al(ifirst-1:ilast+2)
  REAL :: ald(ifirst-1:ilast+2)
  REAL :: bl(ifirst-1:ilast+1)
  REAL :: bld(ifirst-1:ilast+1)
  REAL :: br(ifirst-1:ilast+1)
  REAL :: brd(ifirst-1:ilast+1)
  REAL :: dq(ifirst-3:ilast+2)
  REAL :: dl, dr, pmp, lac, ct, qe
  REAL :: xt, x1, x0
  REAL :: xtd
  INTEGER :: i, j, is3, ie3, ie2, it
!dummy
  INTEGER, PARAMETER :: ie=10, is=10
  INTRINSIC MAX
  INTRINSIC MIN
  INTRINSIC ABS
  INTRINSIC SIGN
  REAL :: grid_type
  EXTERNAL DXA
  REAL :: DXA
  REAL :: result1
  REAL :: result2
  REAL :: result3
  REAL :: result4
  REAL :: result5
  REAL :: min5d
  REAL :: x6d
  REAL :: y4d
  REAL :: min6
  REAL :: min5
  REAL :: min4
  REAL :: min3
  REAL :: min2
  REAL :: min1
  REAL :: x6
  REAL :: x5
  REAL :: min1d
  REAL :: x4
  REAL :: x3
  REAL :: x2
  REAL :: x2d
  REAL :: min4d
  REAL :: x5d
  REAL :: y3d
  REAL :: z1d
  REAL :: max1d
  REAL :: min3d
  REAL :: x4d
  REAL :: z1
  REAL :: y2d
  REAL :: min6d
  REAL :: y5d
  REAL :: max1
  REAL :: y5
  REAL :: min2d
  REAL :: y4
  REAL :: y3
  REAL :: y2
  REAL :: x3d
  REAL :: y1
  REAL :: y1d
  IF (3 .LT. is - 1) THEN
    is3 = is - 1
  ELSE
    is3 = 3
  END IF
  IF (npx - 3 .GT. ie + 1) THEN
    ie3 = ie + 1
  ELSE
    ie3 = npx - 3
  END IF
  IF (npx - 2 .GT. ie + 2) THEN
    ie2 = ie + 2
  ELSE
    ie2 = npx - 2
  END IF
  fluxd = 0.0
  ald = 0.0
  dm1d = 0.0
  bld = 0.0
  brd = 0.0
  DO j=jfirst,jlast
    DO i=is-2,ie+2
      xtd = 0.25*(qd(i+1, j)-qd(i-1, j))
      xt = 0.25*(q(i+1, j)-q(i-1, j))
      IF (xt .GE. 0.) THEN
        x2d = xtd
        x2 = xt
      ELSE
        x2d = -xtd
        x2 = -xt
      END IF
      IF (q(i-1, j) .LT. q(i, j)) THEN
        IF (q(i, j) .LT. q(i+1, j)) THEN
          max1d = qd(i+1, j)
          max1 = q(i+1, j)
        ELSE
          max1d = qd(i, j)
          max1 = q(i, j)
        END IF
      ELSE IF (q(i-1, j) .LT. q(i+1, j)) THEN
        max1d = qd(i+1, j)
        max1 = q(i+1, j)
      ELSE
        max1d = qd(i-1, j)
        max1 = q(i-1, j)
      END IF
      y1d = max1d - qd(i, j)
      y1 = max1 - q(i, j)
      IF (q(i-1, j) .GT. q(i, j)) THEN
        IF (q(i, j) .GT. q(i+1, j)) THEN
          min6d = qd(i+1, j)
          min6 = q(i+1, j)
        ELSE
          min6d = qd(i, j)
          min6 = q(i, j)
        END IF
      ELSE IF (q(i-1, j) .GT. q(i+1, j)) THEN
        min6d = qd(i+1, j)
        min6 = q(i+1, j)
      ELSE
        min6d = qd(i-1, j)
        min6 = q(i-1, j)
      END IF
      z1d = qd(i, j) - min6d
      z1 = q(i, j) - min6
      IF (x2 .GT. y1) THEN
        IF (y1 .GT. z1) THEN
          min1d = z1d
          min1 = z1
        ELSE
          min1d = y1d
          min1 = y1
        END IF
      ELSE IF (x2 .GT. z1) THEN
        min1d = z1d
        min1 = z1
      ELSE
        min1d = x2d
        min1 = x2
      END IF
      dm1d(i) = min1d*SIGN(1.d0, min1*xt)
      dm1(i) = SIGN(min1, xt)
    END DO
    IF (grid_type .LT. 3) THEN
      DO i=is3,ie2
!al(i) = 0.5*(q(i-1,j)+q(i,j)) + r3*(dm1(i-1)-dm1(i))
        ald(i) = 7.0*(qd(i-1, j)+qd(i, j))/12.0 - (qd(i+1, j)+qd(i-2, j)&
&         )/12.0
        al(i) = 7.0/12.0*(q(i-1, j)+q(i, j)) - 1.0/12.0*(q(i+1, j)+q(i-2&
&         , j))
      END DO
      DO i=is3,ie3
        xtd = 2.*dm1d(i)
        xt = 2.*dm1(i)
        IF (xt .GE. 0.) THEN
          x3d = xtd
          x3 = xt
        ELSE
          x3d = -xtd
          x3 = -xt
        END IF
        IF (al(i) - q(i, j) .GE. 0.) THEN
          y2d = ald(i) - qd(i, j)
          y2 = al(i) - q(i, j)
        ELSE
          y2d = -(ald(i)-qd(i, j))
          y2 = -(al(i)-q(i, j))
        END IF
        IF (x3 .GT. y2) THEN
          min2d = y2d
          min2 = y2
        ELSE
          min2d = x3d
          min2 = x3
        END IF
        bld(i) = -(min2d*SIGN(1.d0, min2*xt))
        bl(i) = -SIGN(min2, xt)
        IF (xt .GE. 0.) THEN
          x4d = xtd
          x4 = xt
        ELSE
          x4d = -xtd
          x4 = -xt
        END IF
        IF (al(i+1) - q(i, j) .GE. 0.) THEN
          y3d = ald(i+1) - qd(i, j)
          y3 = al(i+1) - q(i, j)
        ELSE
          y3d = -(ald(i+1)-qd(i, j))
          y3 = -(al(i+1)-q(i, j))
        END IF
        IF (x4 .GT. y3) THEN
          min3d = y3d
          min3 = y3
        ELSE
          min3d = x4d
          min3 = x4
        END IF
        brd(i) = min3d*SIGN(1.d0, min3*xt)
        br(i) = SIGN(min3, xt)
      END DO
!--------------
! fix the edges
!--------------
      IF (is .EQ. 1) THEN
        brd(2) = ald(3) - qd(2, j)
        br(2) = al(3) - q(2, j)
!               xt = t11*(q(0,j)+q(1,j)) + t12*(q(-1,j)+q(2,j)) + t13*(dm1(2)-dm1(-1))
!!!             xt = 0.75*(q(0,j)+q(1,j)) - 0.25*(q(-1,j)+q(2,j))
        result1 = DXA(1, j)
        result2 = DXA(2, j)
        result3 = DXA(1, j)
        result4 = DXA(1, j)
        result5 = DXA(2, j)
        xtd = 0.5*((2.*result1+result2)*(qd(0, j)+qd(1, j))-result3*(qd(&
&         -1, j)+qd(2, j)))/(result4+result5)
        xt = 0.5*((2.*result1+result2)*(q(0, j)+q(1, j))-result3*(q(-1, &
&         j)+q(2, j)))/(result4+result5)
        IF (0. .LT. xt) THEN
          xt = xt
        ELSE
          xt = 0.
          xtd = 0.0
        END IF
        bld(1) = xtd - qd(1, j)
        bl(1) = xt - q(1, j)
        brd(0) = xtd - qd(0, j)
        br(0) = xt - q(0, j)
        xtd = 4.*dm1d(-1)/7. + 11.*qd(-1, j)/14. + 3.*qd(0, j)/14.
        xt = 4./7.*dm1(-1) + 11./14.*q(-1, j) + 3./14.*q(0, j)
        IF (0. .LT. xt) THEN
          xt = xt
        ELSE
          xt = 0.
          xtd = 0.0
        END IF
        bld(0) = xtd - qd(0, j)
        bl(0) = xt - q(0, j)
        xtd = 3.*qd(1, j)/14. + 11.*qd(2, j)/14. - 4.*dm1d(2)/7.
        xt = 3./14.*q(1, j) + 11./14.*q(2, j) - 4./7.*dm1(2)
        IF (0. .LT. xt) THEN
          xt = xt
        ELSE
          xt = 0.
          xtd = 0.0
        END IF
        brd(1) = xtd - qd(1, j)
        br(1) = xt - q(1, j)
        bld(2) = xtd - qd(2, j)
        bl(2) = xt - q(2, j)
        CALL PERT_PPM_DH_D(3, q(0:, j), bl(0:), bld(0:), br(0:), brd(0:)&
&                    , 1)
      END IF
      IF (ie + 1 .EQ. npx) THEN
        bld(npx-2) = ald(npx-2) - qd(npx-2, j)
        bl(npx-2) = al(npx-2) - q(npx-2, j)
!               xt = t11*(q(npx-1,j)+q(npx,j)) + t12*(q(npx-2,j)+q(npx+1,j))   &
!                  + t13*(dm1(npx+1)-dm1(npx-2))
!!!             xt = 0.75*(q(npx-1,j)+q(npx,j)) - 0.25*(q(npx-2,j)+q(npx+1,j))
        result1 = DXA(npx - 1, j)
        result2 = DXA(npx - 2, j)
        result3 = DXA(npx - 1, j)
        result4 = DXA(npx - 1, j)
        result5 = DXA(npx - 2, j)
        xtd = 0.5*((2.*result1+result2)*(qd(npx-1, j)+qd(npx, j))-&
&         result3*(qd(npx-2, j)+qd(npx+1, j)))/(result4+result5)
        xt = 0.5*((2.*result1+result2)*(q(npx-1, j)+q(npx, j))-result3*(&
&         q(npx-2, j)+q(npx+1, j)))/(result4+result5)
        IF (0. .LT. xt) THEN
          xt = xt
        ELSE
          xt = 0.
          xtd = 0.0
        END IF
        brd(npx-1) = xtd - qd(npx-1, j)
        br(npx-1) = xt - q(npx-1, j)
        bld(npx) = xtd - qd(npx, j)
        bl(npx) = xt - q(npx, j)
!               br(npx) = 11./14.*q(npx+1,j) + 3./14.*q(npx,j) - 4./7.*dm1(npx+1)
        xtd = 11.*qd(npx+1, j)/14. + 3.*qd(npx, j)/14. - 4.*dm1d(npx+1)/&
&         7.
        xt = 11./14.*q(npx+1, j) + 3./14.*q(npx, j) - 4./7.*dm1(npx+1)
        IF (0. .LT. xt) THEN
          xt = xt
        ELSE
          xt = 0.
          xtd = 0.0
        END IF
        brd(npx) = xtd - qd(npx, j)
        br(npx) = xt - q(npx, j)
        xtd = 3.*qd(npx-1, j)/14. + 11.*qd(npx-2, j)/14. + 4.*dm1d(npx-2&
&         )/7.
        xt = 3./14.*q(npx-1, j) + 11./14.*q(npx-2, j) + 4./7.*dm1(npx-2)
        IF (0. .LT. xt) THEN
          xt = xt
        ELSE
          xt = 0.
          xtd = 0.0
        END IF
        brd(npx-2) = xtd - qd(npx-2, j)
        br(npx-2) = xt - q(npx-2, j)
        bld(npx-1) = xtd - qd(npx-1, j)
        bl(npx-1) = xt - q(npx-1, j)
        CALL PERT_PPM_DH_D(3, q(npx-2:, j), bl(npx-2:), bld(npx-2:), br(&
&                    npx-2:), brd(npx-2:), 1)
      END IF
    ELSE
!--------------
! grid_type >=4
!--------------
      DO i=ifirst-1,ilast+2
!al(i) = 0.5*(q(i-1,j)+q(i,j)) + r3*(dm1(i-1)-dm1(i))
        ald(i) = 7.0*(qd(i-1, j)+qd(i, j))/12.0 - (qd(i+1, j)+qd(i-2, j)&
&         )/12.0
        al(i) = 7.0/12.0*(q(i-1, j)+q(i, j)) - 1.0/12.0*(q(i+1, j)+q(i-2&
&         , j))
      END DO
      DO i=ifirst-1,ilast+1
        xtd = 2.*dm1d(i)
        xt = 2.*dm1(i)
        IF (xt .GE. 0.) THEN
          x5d = xtd
          x5 = xt
        ELSE
          x5d = -xtd
          x5 = -xt
        END IF
        IF (al(i) - q(i, j) .GE. 0.) THEN
          y4d = ald(i) - qd(i, j)
          y4 = al(i) - q(i, j)
        ELSE
          y4d = -(ald(i)-qd(i, j))
          y4 = -(al(i)-q(i, j))
        END IF
        IF (x5 .GT. y4) THEN
          min4d = y4d
          min4 = y4
        ELSE
          min4d = x5d
          min4 = x5
        END IF
        bld(i) = -(min4d*SIGN(1.d0, min4*xt))
        bl(i) = -SIGN(min4, xt)
        IF (xt .GE. 0.) THEN
          x6d = xtd
          x6 = xt
        ELSE
          x6d = -xtd
          x6 = -xt
        END IF
        IF (al(i+1) - q(i, j) .GE. 0.) THEN
          y5d = ald(i+1) - qd(i, j)
          y5 = al(i+1) - q(i, j)
        ELSE
          y5d = -(ald(i+1)-qd(i, j))
          y5 = -(al(i+1)-q(i, j))
        END IF
        IF (x6 .GT. y5) THEN
          min5d = y5d
          min5 = y5
        ELSE
          min5d = x6d
          min5 = x6
        END IF
        brd(i) = min5d*SIGN(1.d0, min5*xt)
        br(i) = SIGN(min5, xt)
      END DO
    END IF
    DO i=ifirst,ilast+1
      IF (c(i, j) .GT. 0.) THEN
        fluxd(i, j) = qd(i-1, j) + (1.-c(i, j))*(brd(i-1)-cd(i, j)*(bl(i&
&         -1)+br(i-1))-c(i, j)*(bld(i-1)+brd(i-1))) - cd(i, j)*(br(i-1)-&
&         c(i, j)*(bl(i-1)+br(i-1)))
        flux(i, j) = q(i-1, j) + (1.-c(i, j))*(br(i-1)-c(i, j)*(bl(i-1)+&
&         br(i-1)))
      ELSE
        fluxd(i, j) = qd(i, j) + cd(i, j)*(bl(i)+c(i, j)*(bl(i)+br(i))) &
&         + (1.+c(i, j))*(bld(i)+cd(i, j)*(bl(i)+br(i))+c(i, j)*(bld(i)+&
&         brd(i)))
        flux(i, j) = q(i, j) + (1.+c(i, j))*(bl(i)+c(i, j)*(bl(i)+br(i))&
&         )
      END IF
    END DO
  END DO
END SUBROUTINE FXPPMLINEAR_D

!  Differentiation of pert_ppm_dh in forward (tangent) mode:
!   variations   of useful results: al ar
!   with respect to varying inputs: al ar
SUBROUTINE PERT_PPM_DH_D(im, a0, al, ald, ar, ard, iv)
  IMPLICIT NONE
  INTEGER, INTENT(IN) :: im
  INTEGER, INTENT(IN) :: iv
  REAL*4, INTENT(IN) :: a0(im)
  REAL*4, INTENT(INOUT) :: al(im), ar(im)
  REAL*4, INTENT(INOUT) :: ald(im), ard(im)
! Local:
  REAL*4 :: a4, da1, da2, a6da, fmin
  INTEGER :: i
  REAL*4, PARAMETER :: r12=1./12.
  INTRINSIC ABS
  REAL*4 :: abs0
!-----------------------------------
! Optimized PPM in perturbation form:
!-----------------------------------
  IF (iv .EQ. 0) THEN
! Positive definite constraint
    DO i=1,im
      a4 = -(3.*(ar(i)+al(i)))
      da1 = ar(i) - al(i)
      IF (da1 .GE. 0.) THEN
        abs0 = da1
      ELSE
        abs0 = -da1
      END IF
      IF (abs0 .LT. -a4) THEN
        fmin = a0(i) + 0.25/a4*da1**2 + a4*r12
        IF (fmin .LT. 0.) THEN
          IF (ar(i) .GT. 0. .AND. al(i) .GT. 0.) THEN
            ard(i) = 0.0_4
            ar(i) = 0.
            ald(i) = 0.0_4
            al(i) = 0.
          ELSE IF (da1 .GT. 0.) THEN
            ard(i) = -(2.*ald(i))
            ar(i) = -(2.*al(i))
          ELSE
            ald(i) = -(2.*ard(i))
            al(i) = -(2.*ar(i))
          END IF
        END IF
      END IF
    END DO
  ELSE
! Standard PPM constraint
    DO i=1,im
      IF (al(i)*ar(i) .LT. 0.) THEN
        da1 = al(i) - ar(i)
        da2 = da1**2
        a6da = 3.*(al(i)+ar(i))*da1
        IF (a6da .LT. -da2) THEN
          ard(i) = -(2.*ald(i))
          ar(i) = -(2.*al(i))
        ELSE IF (a6da .GT. da2) THEN
          ald(i) = -(2.*ard(i))
          al(i) = -(2.*ar(i))
        END IF
      ELSE
! effect of dm=0 included here
        ald(i) = 0.0_4
        al(i) = 0.
        ard(i) = 0.0_4
        ar(i) = 0.
      END IF
    END DO
  END IF
END SUBROUTINE PERT_PPM_DH_D

